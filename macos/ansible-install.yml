---
- name: Install all standard tools
  hosts: localhost
  # gather_facts: yes
  become: no
  # vars:
  #   bashrc: "{{ ansible_env.HOME }}/.bashrc"

  tasks:
    # - name: Brew update
    #   homebrew:
    #     update_homebrew: true
    #     upgrade_all: true

    # - name: Brew cask update
    #   homebrew_cask:
    #     update_homebrew: true
    #     upgrade_all: true

    # - name: Install packages
    #   homebrew: 
    #     name:
    #       - vim 
    #       - ffmpeg
    #       - git
    #       - git-gui
    #       - git-lfs
    #       - gitui   # optional
    #       - lazygit # optional
    #       - htop
    #       - curl
    #       - httpie
    #       - util-linux
    #       - jq
    #       - yq
    #       - nvm
    #       - pyenv
    #       - jenv
    #       - mvnvm
    #       - gradle
    #       - lazydocker
    #       - bitwarden-cli
    #       - findutils # e.g gnu locate
    #       - bash-completion
    #       - docker-completion
    #       # minor dev dependecies
    #       - the_silver_searcher # code text searcher `ag`
    #       - gnu-tar 
    #       - go
    #       - terminal-notifier
    #       - util-linux
    #       - zstd

    #     state: present
    #     # update_homebrew: true
    #     # upgrade_all: true
    #   # become: yes

    # - name: Install brew cask packages
    #   homebrew_cask: 
    #     name: "{{ item }}"
    #     state: present
    #     install_options: no-quarantine
    #   loop:
    #     - httpie # UI app
    #     - postman
    #     - homebrew/cask-versions/temurin11
    #     - homebrew/cask-versions/corretto17
    #     - docker # https://stackoverflow.com/a/40523608
    #     - bitwarden
    #     - meetingbar
    #     - brave-browser
    #     - arc # optional browser
    #     - alacritty
    #     - visual-studio-code
    #     - intellij-idea # or -ce
    #     - nikitabobko/tap/aerospace
    #     - karabiner-elements
    #     - bluesnooze
    #     - zoom
    #     - yubico-yubikey-manager
    #     - yubico-authenticator
    #     # minor dev dependecies
      


    - name: Install aerospace config
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html
      ansible.builtin.file:
        src: "{{ playbook_dir }}/files/aerospace.toml"
        dest: ~/.aerospace.toml
        state: link

    - name: Nvm configuration
      block: 
        - name: Create dir 
          file:
            path: ~/.nvm
            state: directory
        - name: .zshenv setup
          lineinfile:
            state: present
            path: ~/.zshenv
            line: "{{ item }}"
            create: true
          with_items: 
              - 'export NVM_DIR="$HOME/.nvm"'
              - '[ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ] && \. "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" # This loads nvm'
              - '[ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion'
        - name: Install node and set as default
          shell: source ~/.zshenv && source ~/.nvm/nvm.sh && nvm install lts/* --default
        - name: Use the node in the current session
          shell: source ~/.nvm/nvm.sh && node --version
        - name: Install yarn
          shell: source ~/.nvm/nvm.sh && npm install -g yarn

    - name: JEnv configuration
      block:
        - name: .zshenv setup 
          lineinfile:
            state: present
            path: ~/.zshenv
            line: "{{ item }}"
            create: true
          with_items: 
            #- 'export PATH="$HOMEBREW_PREFIX/opt/jenv/bin:$PATH"'
            - 'export PATH="$HOME/.jenv/bin:$PATH"'
            # - 'eval "$(jenv init -)"'
        - name: add JDK11
          shell: exec $SHELL -l && jenv add $( /usr/libexec/java_home -v 11 ) 
        - name: add JDK17
          shell: exec $SHELL -l && jenv add "$( /usr/libexec/java_home -v 17 )"
        - name: set JDK11 as default
          shell: exec $SHELL -l && jenv global 11.0
        - name: enable plugins
          shell: exec $SHELL -l && jenv enable-plugin {{ item }}
          with_items:
            - maven
            - gradle
            - export
        - name: .zshrc setup 
          lineinfile:
            state: present
            path: ~/.zshrc
            line: "{{ item }}"
            create: true
          with_items: 
            - 'eval "$(jenv init -)"'
            - 'eval "$(jenv enable-plugin export)"'
        - name: jenv doctor
          shell: exec $SHELL -l && jenv doctor # verifying if all is ok
          
    - name: configure findutils
      lineinfile:
        state: present
        path: ~/.zshrc
        line: PATH="$HOMEBREW_PREFIX/opt/findutils/libexec/gnubin:$PATH"
        create: true
    
    - name: enable git lfs # in case of issues https://stackoverflow.com/a/76578109
      shell: git lfs install
      
    - name: start Docker 
      become: no
      shell: 'open /Applications/Docker.app' 

    - name: start AeroSpace 
      shell: 'open /Applications/AeroSpace.app' 

    - name: start bluesnooze 
      shell: 'open /Applications/Bluesnooze.app' # TODO: add it to autostart


    # TODO:
    # pyenv
    # glocate
    # disable InteliJ tabs - Library/Application Support/JetBrains/IntelliJIdea2023.3 
    # bluesnooze - add to autostart
    # vim customizations


    # - name: mlocate - skip undesired directories to be scanned by mlocate
    #   lineinfile:
    #     # create: yes
    #     backup: true
    #     state: present
    #     path: /etc/updatedb.conf
    #     regexp: '^PRUNENAMES='
    #     line: 'PRUNENAMES=".snapshots .config snap .git .bzr .hg .svn Trash Cache cache .cache logs fonts font Frameworks atom .atom apm .apm .ansible .idea libreoffice node_modules .node-gyp .npm ipynb_checkpoints dist-packages site-packages .eggs build help icons modules samples Template Templates template templates snapd locale .pycharm_helpers pycharm_helpers .google-chrome google-chrome __pycache__ pack generated_completions .cargo .git .hg .svn .gpg .npm .gem .cargo .cabal .roswell .wine .PlayOnLinux .local .cache .Trash .mail pictures move scrawl backup .emacs_backup .emacs_undo undo elpa quelpa bundle semanticdb .chronicler build"'
    
    # - name: mlocate - enable scanning btrfs
    #   become: yes
    #   lineinfile:
    #     # create: yes
    #     backup: true
    #     state: present
    #     path: /etc/updatedb.conf
    #     regexp: '^PRUNE_BIND_MOUNTS=='
    #     line: 'PRUNE_BIND_MOUNTS="no"'

    # - name: mlocate - update db
    #   become: yes
    #   # shell: 'updatedb' 
    #   shell: 'updatedb -v > /tmp/updatedb-scan-output'