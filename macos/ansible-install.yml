---
- name: Install all standard tools
  hosts: localhost
  become: no

  tasks:
    - name: Brew update
      homebrew:
        update_homebrew: true
        upgrade_all: true

    - name: Brew cask update
      homebrew_cask:
        update_homebrew: true
        upgrade_all: true

    - name: Install packages
      when: false
      homebrew: 
        name: '{{ item }}'
        state: present
      loop:
        - vim 
        - ffmpeg
        - git
        - git-gui
        - git-lfs
        - gitui   # optional
        - lazygit # optional
        - htop
        - curl
        - httpie
        - jq
        - yq
        - fzf
        - nvm
        - pyenv
        - jenv
        - mvnvm
        - gradle
        - lazydocker
        - mas # cli for apple store
        - bitwarden-cli
        - findutils # e.g gnu locate
        - bash-completion
        - docker-completion
        # minor dev dependecies
        - the_silver_searcher # code text searcher `ag`
        - gnu-tar 
        - go
        - terminal-notifier
        - util-linux
        - zstd
        - coreutils

        # update_homebrew: true
        # upgrade_all: true
      # become: yes

    - name: Install brew cask packages
      homebrew_cask: 
        name: "{{ item }}"
        state: present
        install_options: no-quarantine
      when: false
      loop:
        - rambox
        - httpie # UI app
        - postman
        - homebrew/cask-versions/temurin11
        - homebrew/cask-versions/corretto17
        - docker # https://stackoverflow.com/a/40523608
        - meetingbar
        - brave-browser
        - arc # optional browser
        - alacritty
        - visual-studio-code
        - intellij-idea # or -ce
        - nikitabobko/tap/aerospace
        - karabiner-elements
        - bluesnooze
        - zoom
        - yubico-yubikey-manager
        - yubico-authenticator
        - fig # https://github.com/withfig/autocomplete
        # minor dev dependecies
      

    - name: Install packages via mas (Mac Apple Store cli)
      shell: 'source ~/.zshrc && mas install {{ item }}'
      loop:
        # if doesn't work - reinstall computer OR go to App Store and try to install manually
        - 1352778147 # == mac search Bitwarden 

    - name: Install aerospace config
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html
      ansible.builtin.file:
        src: "{{ playbook_dir }}/files/aerospace.toml"
        dest: ~/.aerospace.toml
        state: link

    - name: pyenv configuration
      block:
        - name: 'pyenv: install python'
          shell: pyenv install --skip-existing 3.11
        - name: 'pyenv: set as global'
          shell: pyenv global 3.11

    # - name: fzf configuration
    #   shell: $(brew --prefix)/opt/fzf/install # inserts 'source ~/.fzf.zsh'

    - name: Nvm configuration
      block: 
        - name: Create dir 
          file:
            path: ~/.nvm
            state: directory
        - name: .zshenv setup
          lineinfile:
            state: present
            path: ~/.zshenv
            line: "{{ item }}"
            create: true
          with_items: 
              - export NVM_DIR="$HOME/.nvm"
              - alias nvm='unalias nvm; [ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh"; nvm $@'
              - '[ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ] && . "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm"'
        - name: Install node and set as default
          shell: source "$(brew --prefix)/opt/nvm/nvm.sh" && nvm install lts/* --default
        - name: Use the node in the current session
          shell: source ~/.zshrc && node --version
        - name: Install yarn
          shell: source ~/.zshrc && npm install -g yarn && yarn --version

    - name: JEnv configuration
      block:
        - name: .zshenv setup 
          lineinfile:
            state: present
            path: ~/.zshenv
            line: "{{ item }}"
            create: true
          with_items: 
            #- 'export PATH="$HOMEBREW_PREFIX/opt/jenv/bin:$PATH"'
            - 'export PATH="$HOME/.jenv/bin:$PATH"'
            # - 'eval "$(jenv init -)"'
        - name: add JDK11
          shell: source ~/.zshrc && jenv add $( /usr/libexec/java_home -v 11 ) 
        - name: add JDK17
          shell: source ~/.zshrc && jenv add "$( /usr/libexec/java_home -v 17 )"
        - name: set JDK11 as default
          shell: source ~/.zshrc && jenv global 11.0
        - name: .zshrc setup 
          lineinfile:
            state: present
            path: ~/.zshrc
            line: "{{ item }}"
            create: true
          with_items: 
            - eval "$(jenv init -)"
            # setting JAVA_HOME when refreshing env and when excecuting 'cd'
            - setJavaHome
            - alias cd=cdAndSetJavaHome
            # - unaliasIfExists cd
            # - alias cd=_cdWithSettingJavaHome
        - name: enable plugins
          shell: source ~/.zshenv && source ~/.zshrc && jenv sh-enable-plugin {{ item }}
          with_items:
            - maven
            - gradle
        - name: disable plugins
          shell: source ~/.zshenv && source ~/.zshrc && jenv disable-plugin {{ item }}
          with_items:
            - export # as this is very slow https://github.com/jenv/jenv/issues/178
        - name: check java version
          shell: source ~/.zshenv && source ~/.zshrc && java --version
        # - name: jenv doctor
        #   shell: exec $SHELL -l && jenv doctor # verifying if all is ok
          
    - name: configure dev packages / libs
      lineinfile:
        state: present
        path: ~/.zshrc
        line: '{{ item }}'
        create: true
      loop:
        - PATH="$HOMEBREW_PREFIX/opt/findutils/libexec/gnubin:$PATH"
        - PATH="/opt/homebrew/opt/util-linux/bin:$PATH"
    
    - name: enable git lfs # in case of issues https://stackoverflow.com/a/76578109
      shell: git lfs install

    - name: Install vs-code extensions
      shell: 'code --install-extension {{ item }}'
      loop:
        - eamodio.gitlens
        - phplasma.csv-to-table
        # TODO: to consider
        # - GrapeCity.gc-excelviewer
        # - janisdd.vscode-edit-csv
        # - mechatroner.rainbow-csv
        # - moshfeu.compare-folders
        # - ms-azuretools.vscode-docker
        # - ms-python.isort
        # - ms-python.python
        # - ms-python.vscode-pylance
        # - ms-toolsai.jupyter
        # - ms-toolsai.jupyter-keymap
        # - ms-toolsai.jupyter-renderers
        # - ms-toolsai.vscode-jupyter-cell-tags
        # - ms-toolsai.vscode-jupyter-slideshow
        # - ms-vscode-remote.remote-containers
        # - redhat.java
        # - VisualStudioExptTeam.intellicode-api-usage-examples
        # - VisualStudioExptTeam.vscodeintellicode
        # - vscjava.vscode-java-debug
        # - vscjava.vscode-java-dependency
        # - vscjava.vscode-java-pack
        # - vscjava.vscode-java-test
        # - vscjava.vscode-maven

      
    - name: start Docker 
      shell: 'open /Applications/Docker.app' 

    - name: start AeroSpace 
      shell: 'open /Applications/AeroSpace.app' 

    - name: start Fig 
      shell: 'open /Applications/Fig.app' 

    - name: start MeetingBar 
      shell: 'open /Applications/MeetingBar.app' 

    - name: start bluesnooze 
      shell: 'open /Applications/Bluesnooze.app' # TODO: add it to autostart


    # TODO:
    # pyenv
    # glocate
    # disable InteliJ tabs - Library/Application Support/JetBrains/IntelliJIdea2023.3 
    # bluesnooze - add to autostart
    # vim customizations
    # fix docker completions - https://stackoverflow.com/a/39884422

    # fzf - [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    # [ -z "$ZSH_NAME" ] && [ -f ~/.fzf.bash ] && source ~/.fzf.bash


    # - name: mlocate - skip undesired directories to be scanned by mlocate
    #   lineinfile:
    #     # create: yes
    #     backup: true
    #     state: present
    #     path: /etc/updatedb.conf
    #     regexp: '^PRUNENAMES='
    #     line: 'PRUNENAMES=".snapshots .config snap .git .bzr .hg .svn Trash Cache cache .cache logs fonts font Frameworks atom .atom apm .apm .ansible .idea libreoffice node_modules .node-gyp .npm ipynb_checkpoints dist-packages site-packages .eggs build help icons modules samples Template Templates template templates snapd locale .pycharm_helpers pycharm_helpers .google-chrome google-chrome __pycache__ pack generated_completions .cargo .git .hg .svn .gpg .npm .gem .cargo .cabal .roswell .wine .PlayOnLinux .local .cache .Trash .mail pictures move scrawl backup .emacs_backup .emacs_undo undo elpa quelpa bundle semanticdb .chronicler build"'
    
    # - name: mlocate - enable scanning btrfs
    #   become: yes
    #   lineinfile:
    #     # create: yes
    #     backup: true
    #     state: present
    #     path: /etc/updatedb.conf
    #     regexp: '^PRUNE_BIND_MOUNTS=='
    #     line: 'PRUNE_BIND_MOUNTS="no"'

    # - name: mlocate - update db
    #   become: yes
    #   # shell: 'updatedb' 
    #   shell: 'updatedb -v > /tmp/updatedb-scan-output'